module AuthToken
  include NodePassword
  def warden
    env['warden']
  end

  def authenticated?
    # check encrypted_password generated by devise
    if check_username_password
      return true
    end

    if check_node_username_password
      return true
      # TODO: regenerate encrypted_password using devise
    end

    if check_node_user_id_token
      return true
    end

    # check access_tokens table
    if params[:access_token] && access_token = AccessToken.find_by(token: params[:access_token])
      @user = access_token.user
      true
    else
      false
    end
  end

  def current_user
    warden.user || @user
  end

  def check_username_password
    return unless request.headers['X-CatchChatAuth']
    username, plain_password = Base64.decode64(request.headers['X-CatchChatAuth']).split(':')
    if (user = User.find_by(username: username)) && user.valid_password?(plain_password)
      @user = user
      return true
    end
  end

  def check_access_token
    return unless token_encoded = request.headers['X-CatchChatToken']
    token_string = Base64.decode64(token_encoded)
    if access_token = AccessToken.find_by(token: token_string)
      @user = access_token.user
      return true
    end
  end

end
